如何决定该用抽象类还是接口？

刚刚的讲解可能有些偏理论，现在，我们就从真实项目开发的角度来看一下，在代码设计、编程开发的时候，什么时候该用抽象类？什么时候该用接口？

实际上，判断的标准很简单。如果我们要表示一种 is-a 的关系，并且是为了解决代码复用的问题，我们就用抽象类；
如果我们要表示 一种 has-a 关系，并且是为了解决抽象而非代码复用的问题，那我们就可以使用接口。
从类的继承层次上来看，抽象类是一种自下而上的设计思路，先有子类的代码重复，然后再抽象成上层的父类（也就是抽象类）。
而接口正好相反，它是一种自上而下的设计思路。我们在编程的时候，一般都是先设计接口，再去考虑具体的实现


is-a has-a

is-a( 是 "a"  小明是人类)表示的是属于得关系。比如兔子属于一种动物（继承关系）。

has-a( 有 "a"  汽车有轮胎) 表示组合，包含关系。比如兔子包含有腿，头等组件；就不能说兔子腿是属于一种兔子（不能说是继承关系）


多用组合少用继承？如何决定该用组合还是继承？
如第一层鸟。
第二层会飞鸟，不会飞鸟
第三层会飞会叫，不会飞会叫，会飞不会叫，不会飞不会叫。。。
如果还有其他属性会下单则需要一直扩展。
继承可能会使代码层次过深，影响代码可读性。

使用实现。
定义接口会飞，会叫，会下蛋
需要哪个则实现这种类型接口
但实现可能会出现定义的类过多，维护也较困难

如何判断该用组合还是继承？
如果类之间的继承结构稳定，层次比较浅，关系不复杂，我们就可以大胆地使用继承。反之，我们就尽量使用组合来替代继承。